#!/bin/bash

#
# S0ix Driver Kernel Module Management Script
# Generated by CMake
#
# Copyright (c) 2024, Bryan Kemp
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

MODULE_NAME="@KMODULE_NAME@"
MODULE_FILE="@CMAKE_CURRENT_BINARY_DIR@/${MODULE_NAME}.ko"
PROC_FILE="/proc/s0ix_stats"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if module is loaded
is_module_loaded() {
    lsmod | grep -q "^${MODULE_NAME}"
}

# Function to check if module file exists
module_file_exists() {
    [ -f "${MODULE_FILE}" ]
}

# Function to load the module
load_module() {
    print_status "Loading ${MODULE_NAME} module..."
    
    if ! module_file_exists; then
        print_error "Module file ${MODULE_FILE} not found. Please build the module first."
        return 1
    fi
    
    if is_module_loaded; then
        print_warning "Module ${MODULE_NAME} is already loaded."
        return 0
    fi
    
    if sudo insmod "${MODULE_FILE}"; then
        print_success "Module ${MODULE_NAME} loaded successfully."
        print_status "Statistics available at ${PROC_FILE}"
    else
        print_error "Failed to load module ${MODULE_NAME}."
        return 1
    fi
}

# Function to unload the module
unload_module() {
    print_status "Unloading ${MODULE_NAME} module..."
    
    if ! is_module_loaded; then
        print_warning "Module ${MODULE_NAME} is not loaded."
        return 0
    fi
    
    if sudo rmmod "${MODULE_NAME}"; then
        print_success "Module ${MODULE_NAME} unloaded successfully."
    else
        print_error "Failed to unload module ${MODULE_NAME}."
        return 1
    fi
}

# Function to show module statistics
show_stats() {
    print_status "Displaying S0ix statistics..."
    
    if ! is_module_loaded; then
        print_error "Module ${MODULE_NAME} is not loaded."
        return 1
    fi
    
    if [ -r "${PROC_FILE}" ]; then
        echo
        cat "${PROC_FILE}"
        echo
    else
        print_error "Cannot read ${PROC_FILE}. Module may not be working correctly."
        return 1
    fi
}

# Function to show module status
show_status() {
    print_status "Module status:"
    
    if module_file_exists; then
        print_success "Module file: ${MODULE_FILE} (exists)"
    else
        print_error "Module file: ${MODULE_FILE} (not found)"
    fi
    
    if is_module_loaded; then
        print_success "Module status: loaded"
        if [ -r "${PROC_FILE}" ]; then
            print_success "Proc entry: ${PROC_FILE} (accessible)"
        else
            print_warning "Proc entry: ${PROC_FILE} (not accessible)"
        fi
    else
        print_warning "Module status: not loaded"
    fi
}

# Function to reload the module
reload_module() {
    print_status "Reloading ${MODULE_NAME} module..."
    unload_module
    sleep 1
    load_module
}

# Function to show help
show_help() {
    echo "S0ix Driver Kernel Module Management Script"
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  load      Load the kernel module"
    echo "  unload    Unload the kernel module"
    echo "  reload    Unload and then load the kernel module"
    echo "  stats     Show S0ix transition statistics"
    echo "  status    Show module status"
    echo "  help      Show this help message"
    echo
    echo "Examples:"
    echo "  $0 load"
    echo "  $0 stats"
    echo "  $0 unload"
    echo
}

# Main script logic
case "$1" in
    load)
        load_module
        ;;
    unload)
        unload_module
        ;;
    reload)
        reload_module
        ;;
    stats)
        show_stats
        ;;
    status)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        print_error "No command specified."
        show_help
        exit 1
        ;;
    *)
        print_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac

